ca_XX_XXXX.bjson = character hurtbox setup? Comes from collisionGimmickParam.arc

AC00_XXXX.JSON NOTES

Character Properties ("runnerParam")
gravity: how floaty a character will be. Limit seems to be -100, which is the floatiest a character can be. Anything higher than -100 (-99 and beyond) and the character will not spawn
walkSpeed: speed character moves when stick is tilted slightly
runSpeed: speed character moves when stick is tilted all the way to the left or right
dashSpeed: speed character moves when stick is smashed left or right
airResistTime: how long a character will "hang" at the apex of their jump.
jumpSpeedX: speed character moves in the air when drifting in the X direction. The more (+) the number, the faster you will drift
jumpSpeedY: speed character moves vertically in the air. The first number is the speed for the first jump, and the second number is the speed for the double jump. The more (+) the number, the higher you will jump
jumpSpeedYLimit: speed cap on how fast your character moves vertically in the air. Applies to both jumps. The more (-) the number, the faster the speed allowed. If this number is set to (+), your character will start rising into the air at the speed you set it to be
descentSpeed: speed character moves when falling
descentSpeedLimit: speed cap for character when falling


Attack Properties
kind: presumably what kind of attack. There seem to be a few types, that being "STRIKE", "GRAB", "THROW", and "MOVEBOX". Changing a "STRIKE" kind to a "GRAB" kind will make that hitbox a command grab, essentially. Changing a "STRIKE" kind to a "MOVEBOX" kind makes the hitbox only affect items and item boxes.
damage: How much damage the attack does to an opponent's health
guardDamage: How much damage the attack does to an opponent's guard
material: controls what damage material is called. These are outlined in the act00_common.json
canGuard: controls if a move can be blocked or not
freezeFrame: How much hitstun is applied when the move connects to an opponent on the ground
freezeFrameGuard: How much hitstun is applied when the move connects to an opponent's guard
freezeFrameAir: How much hitstun is applied when the move connects to an opponent in the air
- NOTE FOR ALL HITSTUN: The more (-) the number, the less hitlag will be incurred. -100 doesn't make opponent flinch at all. Likewise the more (+) the number, the more hitlag the opponent will endure
kbSpeed: Strength of knockback the attack does on grounded opponents. First number is kb in the X direction, second number is kb in the Y direction
kbAirSpeed: Strength of knockback the attack does on opponents in the air. First number is kb in the X direction, second number is kb in the Y direction
- NOTE FOR ALL KB: The closer to 0, the less knockback an opponent will recieve. (-) horizontal kb will send inwards
hitStopFrame: How many frames of hitlag you experience when the move connects
isConflict: controls if a move can initiate a conflict, where characters are locked in a mashing sequence
boneName: The bone of the character model that the hitbox is generated
shape: The shape of the hitbox. Generally these are "SPHERE", but I have also seen "CAPSULE"


Move Input notes (attackerParam)
kind: How hard you press the stick. Normal = tilt input, Strong_Stick = tap input.
stick: What direction the stick is pressed. The directions (going clockwise) is UP, RIGHT_UP, RIGHT, RIGHT_DOWN, DOWN, LEFT_DOWN, LEFT, and LEFT_UP
button: What button is pressed. Options include: ATTACK, STRONG_ATTACK, SPECIAL, GRAB


Combo Table 
Defines what moves can be cancelled out of moves. 




AC01_XXXX.JSON NOTES
tll::actor::command::Frame - specifies a frame in the animation for the following command to start on. For example, if the "frame_" variable is 10 and the next command is a "command::SeOneShot", then the sound effect will play on frame 10 of the animation.
- frame: The frame of the animation specified

tll::actor::command::LerpFrame - Specifies what frame to start LERP frames in the animation. This is usually reserved for movement options, and 
- lerpFrame: the frame LERP will start(?)

tll::actor::command:Anm - Calls an animation
- animeName: the number associated with the animation (can be seen in the character animation's name)
- frame: frame the animation starts on

command::Nall - relates to the N_ALL character bone
- isEnable: ?
- isRotEnable: Enables rotation of the N_ALL character bone(?)

tll::actor::command::Cancel - allows for the cancelling of the currently called animation, at the frame defined by the previous tll::actor::command::Frame. Can lead to some interesting movement

command::SeOneShot - plays a sound effect from the COMMON.PAC sound list. "index" refers to the InfoIndex of the sound effect. However, this is in decimal, not hex.

command::ExtraSeOneShot - plays a sound effect from the CXX.PAC (character) sound list. "index" refers to the InfoIndex of the sound effect. However, this is in decimal, not hex.

command::RandomSeOneShot - plays a random sound effect from a list of sound effects in the CXX.PAC sound list.
- name_: The name of the folder 

command::EffectMat

command::Armor - Sets when a character is invincible and when they are not. Pressure kind "THROUGH" means they're invincible, pressure kind "NORMAL" means they can be hit.

Common Json notes
damageMaterials: Contains parameters for each damage material used 
-sound: InfoIndex of what sound is played. These sounds can be found in the COMMON.PAC file
damageEffects: Contains parameters for each damage effect called


REBUILDING:
- Be sure to use https://jsonformatter.org/json-minify to condense code. 
- The start of each .json file needs an "0D 0A" block at the start. 
- Open the JSON.PAC file with WiiExplorer and export the .arc you want to enter. Open that .arc with BrawlCrate and replace the .json files you need, then save and close Brawlcrate. Afterward, open the JSON.pac WiiExplorer and delete the .arc you want to replace, then add your modified .arc back in